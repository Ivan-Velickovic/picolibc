const std = @import("std");

pub fn build(b: *std.Build) void {
    // @ivanv: this is a bit of trouble, I wasn't expecting to have to duplicate the target.
    const target = std.zig.CrossTarget{
        .cpu_arch = .aarch64,
        .cpu_model = .{ .explicit = &std.Target.arm.cpu.cortex_a53 },
        .os_tag = .freestanding,
        .abi = .none,
    };
    const libc = b.addStaticLibrary(.{
        .name = "c",
        .target = target,
        .optimize = b.standardOptimizeOption(.{}),
    });

    libc.addCSourceFiles(.{
        .files = &.{
            "newlib/libc/string/wmemset.c",
            "newlib/libc/string/bzero.c",
            "newlib/libc/string/strnstr.c",
            "newlib/libc/string/strncpy.c",
            "newlib/libc/string/index.c",
            "newlib/libc/string/wmemchr.c",
            "newlib/libc/string/wcsxfrm_l.c",
            "newlib/libc/string/memmove.c",
            "newlib/libc/string/strxfrm.c",
            "newlib/libc/string/strupr.c",
            "newlib/libc/string/wcwidth.c",
            "newlib/libc/string/wmempcpy.c",
            "newlib/libc/string/wcpncpy.c",
            "newlib/libc/string/wcscasecmp_l.c",
            "newlib/libc/string/wcsdup.c",
            "newlib/libc/string/u_strerr.c",
            "newlib/libc/string/wcspbrk.c",
            "newlib/libc/string/strncasecmp.c",
            "newlib/libc/string/wcsncmp.c",
            "newlib/libc/string/timingsafe_memcmp.c",
            "newlib/libc/string/wcsrchr.c",
            "newlib/libc/string/strcpy.c",
            "newlib/libc/string/wmemmove.c",
            "newlib/libc/string/strrchr.c",
            "newlib/libc/string/strncat.c",
            "newlib/libc/string/wmemcmp.c",
            "newlib/libc/string/stpncpy.c",
            "newlib/libc/string/strsep.c",
            "newlib/libc/string/wcsncasecmp_l.c",
            "newlib/libc/string/strcat.c",
            "newlib/libc/string/strchr.c",
            "newlib/libc/string/fls.c",
            "newlib/libc/string/strtok_r.c",
            "newlib/libc/string/memrchr.c",
            "newlib/libc/string/mempcpy.c",
            "newlib/libc/string/memmem.c",
            "newlib/libc/string/flsll.c",
            "newlib/libc/string/strcoll.c",
            "newlib/libc/string/wcscmp.c",
            "newlib/libc/string/strcmp.c",
            "newlib/libc/string/strlwr.c",
            "newlib/libc/string/wcschr.c",
            "newlib/libc/string/strpbrk.c",
            "newlib/libc/string/strerror_r.c",
            "newlib/libc/string/strspn.c",
            "newlib/libc/string/explicit_bzero.c",
            "newlib/libc/string/wcsspn.c",
            "newlib/libc/string/wcsxfrm.c",
            "newlib/libc/string/wcsncpy.c",
            "newlib/libc/string/swab.c",
            "newlib/libc/string/ffsl.c",
            "newlib/libc/string/strlen.c",
            "newlib/libc/string/strcspn.c",
            "newlib/libc/string/timingsafe_bcmp.c",
            "newlib/libc/string/strxfrm_l.c",
            "newlib/libc/string/wcscasecmp.c",
            "newlib/libc/string/wcslcpy.c",
            "newlib/libc/string/strsignal.c",
            "newlib/libc/string/wcsstr.c",
            "newlib/libc/string/wcsncat.c",
            "newlib/libc/string/strchrnul.c",
            "newlib/libc/string/strcasecmp_l.c",
            "newlib/libc/string/wmemcpy.c",
            "newlib/libc/string/memcmp.c",
            "newlib/libc/string/memchr.c",
            "newlib/libc/string/memccpy.c",
            "newlib/libc/string/strcasestr.c",
            "newlib/libc/string/gnu_basename.c",
            "newlib/libc/string/strncmp.c",
            "newlib/libc/string/ffsll.c",
            "newlib/libc/string/strverscmp.c",
            "newlib/libc/string/rawmemchr.c",
            "newlib/libc/string/wcslen.c",
            "newlib/libc/string/wcsnlen.c",
            "newlib/libc/string/strtok.c",
            "newlib/libc/string/strdup.c",
            "newlib/libc/string/wcstok.c",
            "newlib/libc/string/strnlen.c",
            "newlib/libc/string/strerror.c",
            "newlib/libc/string/wcscat.c",
            "newlib/libc/string/strncasecmp_l.c",
            "newlib/libc/string/memcpy.c",
            "newlib/libc/string/bcmp.c",
            "newlib/libc/string/wcscpy.c",
            "newlib/libc/string/strlcpy.c",
            "newlib/libc/string/strlcat.c",
            "newlib/libc/string/wcscspn.c",
            "newlib/libc/string/wcscoll_l.c",
            "newlib/libc/string/wcscoll.c",
            "newlib/libc/string/stpcpy.c",
            "newlib/libc/string/wcsncasecmp.c",
            "newlib/libc/string/strstr.c",
            "newlib/libc/string/rindex.c",
            "newlib/libc/string/bcopy.c",
            "newlib/libc/string/strcasecmp.c",
            "newlib/libc/string/memset.c",
            "newlib/libc/string/xpg_strerror_r.c",
            "newlib/libc/string/wcswidth.c",
            "newlib/libc/string/wcslcat.c",
            "newlib/libc/string/strcoll_l.c",
            "newlib/libc/string/strndup.c",
            "newlib/libc/string/flsl.c",
            "newlib/libc/string/wcpcpy.c",
            "newlib/libc/argz/argz_stringify.c",
        }
    });
    libc.addIncludePath(.{ .path = "newlib/libc/include" });
    libc.addIncludePath(.{ .path = "newlib/libc/stdio" });
    // @ivanv: hack until we auto-generate picolibc.h from picolibc.h.in
    libc.addIncludePath(.{ .path = "./" });

    b.installArtifact(libc);
}
